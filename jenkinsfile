pipeline {
    agent any
    
    environment {
        GHCR_CREDS_ID = 'ghcr-creds'
        GITHUB_CREDS_ID = 'github-creds'
        TARGET_SSH_CREDS_ID = 'a5-localhost-jenkins'

        TARGET_DEPLOY_SERVER = 'GEEKOM-A5-Server'

        DISCORD_CREDS_ID = 'discord-webhook-url'

        IMAGE_NAME = 'ghcr.io/paul2021-r/project-mini-frontend'

        TARGET_HOST = credentials('ssh-host-creds')
        TARGET_PORT = credentials('ssh-port-creds')
        TARGET_PROJECT_PATH = '/home/hansol/workspace/project-mini-frontend'
    }

    stages {
    // code pull
        stage('Checkout') {
            steps {
                echo "1. Get the latest code from GitHub"
                git credentialsId: GITHUB_CREDS_ID, url: 'https://github.com/paul2021-r/project-mini-frontend.git', branch: 'main'
            }
        }

        // build image
        stage('Build Image') {
            steps {
                echo "2. Build New Docker Image"
                script {
                    def imageTag = "${IMAGE_NAME}:${env.BUILD_NUMBER}" 
                    sh "docker build -t ${imageTag} ./app" 
                }
            }
        }

        // push image
        stage('Push to GHCR') {
            steps {
                echo "3. Push the Docker Image to GHCR"
                script {
                    def imageTag = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
                    withCredentials([usernamePassword(credentialsId: GHCR_CREDS_ID, usernameVariable: 'USER', passwordVariable: 'TOKEN')]) {
                        sh "echo ${TOKEN} | docker login ghcr.io -u ${USER} --password-stdin"
                        sh "docker push ${imageTag}"
                    }
                }
            }
        }

        // deploy to server
        stage('Deploy to Server') {
            steps {
                echo "4. Deploy the new image to the ${TARGET_DEPLOY_SERVER} server"
                script {
                    // Ïñ¥Îñ§ Ïª®ÌÖåÏù¥ÎÑàÎ•º ÏóÖÎç∞Ïù¥Ìä∏ Î∞è ÏóÖÏä§Ìä∏Î¶º ÎåÄÏÉÅÏùÑ ÏßÄÏ†ï
                    def deployService = (env.BUILD_NUMBER.toInteger() % 2 == 0) ? "app-green" : "app-blue" 
                    def upstreamService = (deployService == "app-green") ? "app-blue" : "app-green"
                    def deployEnvVar = (deployService == "app-green") ? "APP_GREEN_IMAGE" : "APP_BLUE_IMAGE"

                    def imageTag = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
                    withCredentials([usernamePassword(credentialsId: GHCR_CREDS_ID, usernameVariable: 'GHCR_USER', passwordVariable: 'GHCR_TOKEN')]) {
                        sshagent(credentials: [TARGET_SSH_CREDS_ID]) {
                            sh """ 
                                ssh -o StrictHostKeyChecking=no -p ${TARGET_PORT} ${TARGET_HOST} '
                                set -ex
                                


                                echo "--- Logging in to GHCR on target server ---"
                                echo "${GHCR_TOKEN}" | docker login ghcr.io -u ${GHCR_USER} --password-stdin

                                echo "--- (1/4) Pull the new image : ${imageTag} ---"
                                docker pull ${imageTag}

                                echo "--- (2/4) Replace ${deployService} Server to new  ---"
                                cd ${TARGET_PROJECT_PATH}
                                
                                echo "--- Refresh main repository ---"
                                git pull origin main
                                git checkout main
                                
                                docker compose --env-file init.env up -d --no-deps --force-recreate ${deployService}

                                echo "--- (3/4) Switch Nginx Configuration to change traffic ---"
                                sed -i "s|server ${upstreamService}:3000;|server ${deployService}:3000;|" ${TARGET_PROJECT_PATH}/nginx/nginx.conf

                                echo "--- (4/4) Reload Nginx Configuration ---"
                                docker compose -f docker-compose.yml exec -T nginx nginx -s reload

                                echo "--- Logging out from GHCR on target server ---"
                                docker logout ghcr.io
                                
                                echo "--- All Deploy Proccess is done ---"
                                '
                            """
                        }
                    }
                }
            }
        }
    }
   
    post {
        success {
            echo "Deployment succeeded. Now send a discord notification."
            script {
                withCredentials([string(credentialsId: DISCORD_CREDS_ID, variable: 'DISCORD_URL')]) {
                    def message = "{\"content\": \"üöÄ Build Process is successfully finished : **[${env.JOB_NAME}]** - **#${env.BUILD_NUMBER}**\"}"

                    sh "curl -X POST -H 'Content-Type: application/json' --data '${message}' ${DISCORD_URL}"
                }

            }

        }
        failure {
            echo "Deployment failed! Now send a discord notification."

            script {
                withCredentials([string(credentialsId: DISCORD_CREDS_ID, variable: 'DISCORD_URL')]) {
                    def message = "{\"content\": \"üî• Build Process is failed. Check Build logs ${env.BUILD_URL} : **[${env.JOB_NAME}]** - **#${env.BUILD_NUMBER}**\"}"

                    sh "curl -X POST -H 'Content-Type: application/json' --data '${message}' ${DISCORD_URL}"
                }    
            }
            
        }
        always {
            echo "Logout from GHCR"
            sh "docker logout ghcr.io"
        }
    }
}